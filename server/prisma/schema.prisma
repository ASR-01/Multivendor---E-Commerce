generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  username    String    @unique
  email       String
  phoneNumber String    @unique
  password    String
  role        Role      @default(SELLER)
  firstName   String?
  lastName    String?
  address     Address[]
  stores      Store[]
  photos      Photo[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  street         String
  city           String
  state          String
  postalCode     String
  country        String
  userAddressId  String?     @db.ObjectId
  user           User?       @relation(fields: [userAddressId], references: [id])
  storeAddressId String?     @db.ObjectId
  store          Store?      @relation(fields: [storeAddressId], references: [id])
}

model Store {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeTitle  String    @unique
  description String?
  storeType   StoreType? @default(ECOMMERCE)
  userId      String    @db.ObjectId
  address     Address[]
  products    Product[]
  photos      Photo[]
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  productId   String     @unique
  productName String
  description String?
  price       String
  photos      Photo[]
  quantity    String
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  categories  Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Photo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  filepath  String
  productId String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  storeId   String?  @db.ObjectId
  store     Store?   @relation(fields: [storeId], references: [id])
  createdAt DateTime @default(now())
}

model Category {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  categoryName        String   @unique
  categoryDescription String
  productId           String   @db.ObjectId
  product             Product  @relation(fields: [productId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

enum Role {
  ADMIN
  SELLER
}

enum StoreType {
  ECOMMERCE
  FOOD
  BEAUTY
  HOUSING
  SERVICES
}
