generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  address     Address?
  password    String
  userName    String   @unique
  email       String     @unique
  phoneNumber String
  gender      String
  role        Role       @default(CLIENT)
  store       Store?
  order       Order?
  CartItem    CartItem?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Address {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId @unique
  street  String
  city    String
  state   String
  pinCode String
  User    User   @relation(fields: [userId], references: [id])
}

model Store {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      StoreType
  ownerId   String    @db.ObjectId @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User      @relation(fields: [ownerId], references: [id])
}

model Product {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  storeId     String              @db.ObjectId
  stock       Int
  imageUrl    String
  CartItem    CartItem[]
  categories  CategoryToProduct[]
  orders      Order[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  Store       Store               @relation(fields: [storeId], references: [id])
}

model Category {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String              @unique
  description String?
  products    CategoryToProduct[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model CategoryToProduct {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  categoryId String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([productId, categoryId])
}

model Order {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId @unique
  productId String      @db.ObjectId
  quantity  Int
  status    OrderStatus
  user      User        @relation(fields: [userId], references: [id])
  product   Product     @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId @unique
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum Role {
  CLIENT
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELED
}

enum StoreType {
  ECCOMERCE
  FOOD
  ELECTRONICS
  HEALTH
}
